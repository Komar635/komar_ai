import { safeLogger } from './logger'

export interface ProviderConfig {
  name: string
  priority: number
  enabled: boolean
  maxRetries: number
  timeout: number
  healthCheck?: () => Promise<boolean>
}

export interface ProviderStatus {
  name: string
  isHealthy: boolean
  lastError?: string
  lastCheck: Date
  consecutiveFailures: number
}

class ProviderManager {
  private providers: Map<string, ProviderConfig> = new Map()
  private status: Map<string, ProviderStatus> = new Map()
  private fallbackOrder: string[] = []

  constructor() {
    this.initializeProviders()
  }

  private initializeProviders() {
    // –ü–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ (–æ—Ç –ª—É—á—à–µ–≥–æ –∫ —Ö—É–¥—à–µ–º—É)
    const configs: ProviderConfig[] = [
      {
        name: 'groq',
        priority: 1,
        enabled: !!process.env.GROQ_API_KEY,
        maxRetries: 5, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        timeout: 45000 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
      },
      {
        name: 'huggingface',
        priority: 2,
        enabled: true, // –í—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
        maxRetries: 5, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        timeout: 90000 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
      },
      {
        name: 'together',
        priority: 3,
        enabled: !!process.env.TOGETHER_API_KEY,
        maxRetries: 2,
        timeout: 45000
      },
      {
        name: 'cohere',
        priority: 4,
        enabled: !!process.env.COHERE_API_KEY,
        maxRetries: 2,
        timeout: 30000
      },
      {
        name: 'ollama',
        priority: 5,
        enabled: true, // –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –∫–∞–∫ fallback
        maxRetries: 1,
        timeout: 120000
      },
      {
        name: 'mock',
        priority: 999,
        enabled: false, // –ü–û–õ–ù–û–°–¢–¨–Æ –û–¢–ö–õ–Æ–ß–ê–ï–ú MOCK –ü–†–û–í–ê–ô–î–ï–† - –ù–ï –î–û–õ–ñ–ï–ù –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨–°–Ø!
        maxRetries: 1,
        timeout: 5000
      }
    ]

    configs.forEach(config => {
      this.providers.set(config.name, config)
      this.status.set(config.name, {
        name: config.name,
        isHealthy: true,
        lastCheck: new Date(),
        consecutiveFailures: 0
      })
    })

    // –°–æ–∑–¥–∞—ë–º –ø–æ—Ä—è–¥–æ–∫ fallback –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    this.fallbackOrder = configs
      .filter(config => config.enabled)
      .sort((a, b) => a.priority - b.priority)
      .map(config => config.name)

    safeLogger.info(`üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: ${this.fallbackOrder.join(' ‚Üí ')}`)
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ª—É—á—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
   */
  getBestAvailableProvider(): string | null {
    safeLogger.info(`üîç –ü–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏–∑: ${this.fallbackOrder.join(', ')}`);
    
    for (const providerName of this.fallbackOrder) {
      const status = this.status.get(providerName)
      const config = this.providers.get(providerName)
      
      safeLogger.info(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ ${providerName}: healthy=${status?.isHealthy}, enabled=${config?.enabled}`);
      
      if (status?.isHealthy && config?.enabled) {
        safeLogger.info(`‚úÖ –í—ã–±—Ä–∞–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä: ${providerName}`);
        return providerName
      }
    }
    
    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤–º–µ—Å—Ç–æ mock
    safeLogger.warn(`‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤`);
    return null
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≤ –ø–æ—Ä—è–¥–∫–µ fallback
   */
  getNextProvider(currentProvider: string): string | null {
    const currentIndex = this.fallbackOrder.indexOf(currentProvider)
    if (currentIndex === -1 || currentIndex >= this.fallbackOrder.length - 1) {
      return null
    }

    for (let i = currentIndex + 1; i < this.fallbackOrder.length; i++) {
      const providerName = this.fallbackOrder[i]
      const status = this.status.get(providerName)
      const config = this.providers.get(providerName)
      
      if (status?.isHealthy && config?.enabled) {
        return providerName
      }
    }
    
    return null
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
   */
  canRetryWithProvider(providerName: string, attemptCount: number): boolean {
    const config = this.providers.get(providerName)
    const status = this.status.get(providerName)
    
    if (!config || !status) {
      return false
    }
    
    // –ú–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å, –µ—Å–ª–∏ –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º—É–º–∞ –ø–æ–ø—ã—Ç–æ–∫
    return attemptCount < config.maxRetries && status.isHealthy
  }

  /**
   * –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π
   */
  markProviderAsUnhealthy(providerName: string, error: string) {
    const status = this.status.get(providerName)
    const config = this.providers.get(providerName)
    
    if (status && config) {
      status.consecutiveFailures += 1
      status.lastError = error
      status.lastCheck = new Date()
      
      // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –º–Ω–æ–≥–∏—Ö –ø–æ–ø—ã—Ç–æ–∫
      if (status.consecutiveFailures >= config.maxRetries) {
        status.isHealthy = false
        safeLogger.error(`‚ùå –ü—Ä–æ–≤–∞–π–¥–µ—Ä ${providerName} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ ${status.consecutiveFailures} –ø–æ–ø—ã—Ç–æ–∫: ${error}`)
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
        const retryDelay = 30 * 1000 // 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        setTimeout(() => this.attemptProviderRecovery(providerName), retryDelay)
      } else {
        safeLogger.warn(`‚ö†Ô∏è –ü—Ä–æ–≤–∞–π–¥–µ—Ä ${providerName} –æ—à–∏–±–∫–∞ ${status.consecutiveFailures}/${config.maxRetries}: ${error}`)
        // –î–∞–µ–º —à–∞–Ω—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
        const retryDelay = 10 * 1000 // 10 —Å–µ–∫—É–Ω–¥
        setTimeout(() => this.attemptProviderRecovery(providerName), retryDelay)
      }
    }
  }

  /**
   * –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∫–∞–∫ –¥–æ—Å—Ç—É–ø–Ω—ã–π
   */
  markProviderAsHealthy(providerName: string) {
    const status = this.status.get(providerName)
    if (status) {
      const wasUnhealthy = !status.isHealthy
      status.isHealthy = true
      status.lastError = undefined
      status.lastCheck = new Date()
      status.consecutiveFailures = 0
      
      if (wasUnhealthy) {
        safeLogger.info(`‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä ${providerName} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`)
      }
    }
  }

  /**
   * –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
   */
  private async attemptProviderRecovery(providerName: string) {
    const config = this.providers.get(providerName)
    if (!config?.enabled) return

    safeLogger.info(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ ${providerName}`)
    
    try {
      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
      if (config.healthCheck) {
        const isHealthy = await config.healthCheck()
        if (isHealthy) {
          this.markProviderAsHealthy(providerName)
        }
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø—Ä–æ—Å—Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        // –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—Ä–æ—Å–µ
        const status = this.status.get(providerName)
        if (status) {
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
          status.consecutiveFailures = Math.max(0, status.consecutiveFailures - 2)
          // –ï—Å–ª–∏ –æ—à–∏–±–æ–∫ –º–∞–ª–æ, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–¥–æ—Ä–æ–≤—ã–π
          if (status.consecutiveFailures <= 1) {
            this.markProviderAsHealthy(providerName)
          }
        }
      }
    } catch (error) {
      safeLogger.error(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ ${providerName} –Ω–µ —É–¥–∞–ª–æ—Å—å:`, error)
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
   */
  getProvidersStatus(): ProviderStatus[] {
    return Array.from(this.status.values())
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
   */
  getProviderConfig(providerName: string): ProviderConfig | undefined {
    return this.providers.get(providerName)
  }
}

// –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const providerManager = new ProviderManager()