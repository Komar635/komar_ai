import { safeLogger } from './logger'

export interface CacheEntry {
  key: string
  data: any
  timestamp: number
  expiresAt: number
  accessCount: number
  lastAccessed: number
}

export interface CacheStats {
  totalEntries: number
  hitCount: number
  missCount: number
  hitRate: number
  totalSize: number
}

class ResponseCache {
  private cache: Map<string, CacheEntry> = new Map()
  private hitCount = 0
  private missCount = 0
  private maxEntries = 1000
  private defaultTTL = 30 * 60 * 1000 // 30 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –∫—ç—à–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
   */
  private generateCacheKey(message: string, mode: 'fast' | 'deep', provider?: string): string {
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –∫—ç—à
    const normalizedMessage = message.toLowerCase().trim()
    const keyData = {
      message: normalizedMessage,
      mode,
      provider: provider || 'any'
    }
    
    // –°–æ–∑–¥–∞—ë–º —Ö—ç—à –∏–∑ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Unicode
    const jsonString = JSON.stringify(keyData)
    const buffer = Buffer.from(jsonString, 'utf8')
    return buffer.toString('base64').replace(/[+/=]/g, '')
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å
   */
  private shouldCache(message: string, mode: 'fast' | 'deep'): boolean {
    // –ù–µ –∫—ç—à–∏—Ä—É–µ–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–ª–∏ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (message.length < 3 || message.length > 1000) {
      return false
    }

    // –ù–µ –∫—ç—à–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏ –∏–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const timePatterns = [
      /—Å–µ–π—á–∞—Å|—Å–µ–≥–æ–¥–Ω—è|–≤—á–µ—Ä–∞|–∑–∞–≤—Ç—Ä–∞|–≤—Ä–µ–º—è|–¥–∞—Ç–∞/i,
      /\d{2}:\d{2}|\d{2}\.\d{2}\.\d{4}|\d{4}-\d{2}-\d{2}/,
      /–º–µ–Ω—è –∑–æ–≤—É—Ç|–º–æ–µ –∏–º—è|—è —Ä–∞–±–æ—Ç–∞—é|–º–æ–π/i
    ]

    return !timePatterns.some(pattern => pattern.test(message))
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
   */
  get(message: string, mode: 'fast' | 'deep', provider?: string): any | null {
    if (!this.shouldCache(message, mode)) {
      return null
    }

    const key = this.generateCacheKey(message, mode, provider)
    const entry = this.cache.get(key)

    if (!entry) {
      this.missCount++
      return null
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç—ë–∫ –ª–∏ –∫—ç—à
    if (Date.now() > entry.expiresAt) {
      this.cache.delete(key)
      this.missCount++
      return null
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç—É–ø–∞
    entry.accessCount++
    entry.lastAccessed = Date.now()
    this.hitCount++

    safeLogger.info(`üéØ –ö—ç—à –ø–æ–ø–∞–¥–∞–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: ${message.substring(0, 50)}...`)
    
    return entry.data
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à
   */
  set(message: string, mode: 'fast' | 'deep', data: any, provider?: string, ttl?: number): void {
    if (!this.shouldCache(message, mode)) {
      return
    }

    // –û—á–∏—â–∞–µ–º –∫—ç—à –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞
    if (this.cache.size >= this.maxEntries) {
      this.cleanup()
    }

    const key = this.generateCacheKey(message, mode, provider)
    const now = Date.now()
    const actualTTL = ttl || this.defaultTTL

    const entry: CacheEntry = {
      key,
      data,
      timestamp: now,
      expiresAt: now + actualTTL,
      accessCount: 1,
      lastAccessed: now
    }

    this.cache.set(key, entry)

    safeLogger.info(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫—ç—à: ${message.substring(0, 50)}... (TTL: ${actualTTL / 1000}s)`)
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π
   */
  private cleanup(): void {
    const now = Date.now()
    let cleanedCount = 0

    // –£–¥–∞–ª—è–µ–º –∏—Å—Ç—ë–∫—à–∏–µ –∑–∞–ø–∏—Å–∏
    for (const [key, entry] of this.cache.entries()) {
      if (now > entry.expiresAt) {
        this.cache.delete(key)
        cleanedCount++
      }
    }

    // –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø–∏—Å–µ–π, —É–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –∏ —Ä–µ–¥–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ
    if (this.cache.size >= this.maxEntries * 0.9) {
      const entries = Array.from(this.cache.entries())
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –¥–æ—Å—Ç—É–ø—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±—Ä–∞—â–µ–Ω–∏–π
      entries.sort(([, a], [, b]) => {
        const scoreA = a.lastAccessed + (a.accessCount * 60000) // –ë–æ–Ω—É—Å –∑–∞ —á–∞—Å—Ç–æ—Ç—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        const scoreB = b.lastAccessed + (b.accessCount * 60000)
        return scoreA - scoreB
      })

      // –£–¥–∞–ª—è–µ–º 25% —Å–∞–º—ã—Ö –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∑–∞–ø–∏—Å–µ–π
      const toRemove = Math.floor(entries.length * 0.25)
      for (let i = 0; i < toRemove; i++) {
        this.cache.delete(entries[i][0])
        cleanedCount++
      }
    }

    if (cleanedCount > 0) {
      safeLogger.info(`üßπ –û—á–∏—â–µ–Ω–æ ${cleanedCount} –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫—ç—à–∞`)
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
   */
  getStats(): CacheStats {
    const totalRequests = this.hitCount + this.missCount
    
    return {
      totalEntries: this.cache.size,
      hitCount: this.hitCount,
      missCount: this.missCount,
      hitRate: totalRequests > 0 ? (this.hitCount / totalRequests) * 100 : 0,
      totalSize: this.calculateCacheSize()
    }
  }

  /**
   * –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞ –≤ –±–∞–π—Ç–∞—Ö
   */
  private calculateCacheSize(): number {
    let totalSize = 0
    
    for (const entry of this.cache.values()) {
      // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä JSON —Å—Ç—Ä–æ–∫–∏
      totalSize += JSON.stringify(entry).length * 2 // UTF-16, 2 –±–∞–π—Ç–∞ –Ω–∞ —Å–∏–º–≤–æ–ª
    }
    
    return totalSize
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à
   */
  clear(): void {
    this.cache.clear()
    this.hitCount = 0
    this.missCount = 0
    safeLogger.info('üóëÔ∏è –ö—ç—à –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω')
  }

  /**
   * –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
   */
  warmup(): void {
    const commonQueries = [
      { message: '–ü—Ä–∏–≤–µ—Ç', mode: 'fast' as const, response: '–ü—Ä–∏–≤–µ—Ç! –Ø Komair, –≤–∞—à –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ö–∞–∫ –¥–µ–ª–∞?' },
      { message: '–ö–∞–∫ –¥–µ–ª–∞?', mode: 'fast' as const, response: '–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏.' },
      { message: '–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?', mode: 'fast' as const, response: '–Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–º–æ–≥–∞—Ç—å —Å –∞–Ω–∞–ª–∏–∑–æ–º, –æ–±—ä—è—Å–Ω—è—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!' },
      { message: '–°–ø–∞—Å–∏–±–æ', mode: 'fast' as const, response: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å.' }
    ]

    commonQueries.forEach(({ message, mode, response }) => {
      this.set(message, mode, {
        content: response,
        mode,
        processingTime: 100,
        model: 'Cache: Prewarmed'
      }, 'cache', 24 * 60 * 60 * 1000) // 24 —á–∞—Å–∞ –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    })

    safeLogger.info(`üî• –ö—ç—à –ø—Ä–æ–≥—Ä–µ—Ç ${commonQueries.length} —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏`)
  }
}

// –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const responseCache = new ResponseCache()

// –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º –∫—ç—à –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
responseCache.warmup()