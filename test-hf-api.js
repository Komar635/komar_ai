#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Hugging Face API
 * –ó–∞–ø—É—Å–∫: node test-hf-api.js
 */

const https = require('https');

// –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const models = [
  'microsoft/DialoGPT-medium',
  'facebook/blenderbot-400M-distill',
  'microsoft/DialoGPT-small'
];

async function testModel(model) {
  return new Promise((resolve) => {
    const data = JSON.stringify({
      inputs: "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
      parameters: {
        max_new_tokens: 50,
        temperature: 0.7,
        do_sample: true,
        return_full_text: false
      },
      options: {
        wait_for_model: true,
        use_cache: false
      }
    });

    const options = {
      hostname: 'api-inference.huggingface.co',
      port: 443,
      path: `/models/${model}`,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': data.length,
        // –ë–µ–∑ —Ç–æ–∫–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø (—Å –ª–∏–º–∏—Ç–∞–º–∏)
      }
    };

    const req = https.request(options, (res) => {
      let responseData = '';

      res.on('data', (chunk) => {
        responseData += chunk;
      });

      res.on('end', () => {
        try {
          const result = JSON.parse(responseData);
          
          if (res.statusCode === 200) {
            console.log(`‚úÖ ${model}: –†–ê–ë–û–¢–ê–ï–¢`);
            if (result[0]?.generated_text) {
              console.log(`   –û—Ç–≤–µ—Ç: "${result[0].generated_text.slice(0, 100)}..."`);
            }
          } else {
            console.log(`‚ùå ${model}: –û–®–ò–ë–ö–ê ${res.statusCode}`);
            console.log(`   –î–µ—Ç–∞–ª–∏: ${result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
          }
        } catch (e) {
          console.log(`‚ùå ${model}: –û–®–ò–ë–ö–ê –ü–ê–†–°–ò–ù–ì–ê`);
          console.log(`   –û—Ç–≤–µ—Ç: ${responseData.slice(0, 100)}...`);
        }
        
        resolve();
      });
    });

    req.on('error', (e) => {
      console.log(`‚ùå ${model}: –°–ï–¢–ï–í–ê–Ø –û–®–ò–ë–ö–ê - ${e.message}`);
      resolve();
    });

    req.setTimeout(10000, () => {
      console.log(`‚è∞ ${model}: –¢–ê–ô–ú–ê–£–¢`);
      req.destroy();
      resolve();
    });

    req.write(data);
    req.end();
  });
}

async function main() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Hugging Face API...\n');
  
  for (const model of models) {
    await testModel(model);
    await new Promise(resolve => setTimeout(resolve, 1000)); // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
  }
  
  console.log('\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('\nüí° –°–æ–≤–µ—Ç: –ü–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –Ω–∞ https://huggingface.co/settings/tokens');
  console.log('   –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤.');
}

main().catch(console.error);