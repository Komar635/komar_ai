// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Groq API
const https = require('https');

// –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const GROQ_API_KEY = process.env.GROQ_API_KEY;

if (!GROQ_API_KEY) {
  console.error('‚ùå GROQ_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!');
  console.log('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è GROQ_API_KEY');
  process.exit(1);
}

// –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ Groq API
const testData = {
  model: 'llama-3.1-8b-instant',
  messages: [
    {
      role: 'user',
      content: '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Groq API.'
    }
  ],
  max_tokens: 100,
  temperature: 0.7
};

const options = {
  hostname: 'api.groq.com',
  port: 443,
  path: '/openai/v1/chat/completions',
  method: 'POST',
  headers: {
    'Authorization': `Bearer ${GROQ_API_KEY}`,
    'Content-Type': 'application/json'
  }
};

console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ Groq API...');

const req = https.request(options, (res) => {
  let data = '';
  
  console.log(`üì• –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${res.statusCode}`);
  
  res.on('data', (chunk) => {
    data += chunk;
  });
  
  res.on('end', () => {
    try {
      const response = JSON.parse(data);
      
      if (response.error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ Groq API:', response.error);
        process.exit(1);
      }
      
      if (response.choices && response.choices[0] && response.choices[0].message) {
        console.log('‚úÖ Groq API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
        console.log('–û—Ç–≤–µ—Ç:', response.choices[0].message.content);
        console.log('–ú–æ–¥–µ–ª—å:', response.model);
      } else {
        console.log('‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:', data);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞:', error.message);
      console.log('–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', data);
      process.exit(1);
    }
  });
});

req.on('error', (error) => {
  console.error('‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞:', error.message);
  process.exit(1);
});

req.write(JSON.stringify(testData));
req.end();

console.log('‚è≥ –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Groq API...');